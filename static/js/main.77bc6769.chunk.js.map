{"version":3,"sources":["components/post/index.js","components/show_button/index.js","App.js","serviceWorker.js","index.js"],"names":["Post","author","content","image","date","className","src","photo","alt","name","nickname","ShowButton","useState","btnStatus","changeStatus","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yPAkCeA,MA/Bf,YAAgD,IAAhCC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,KACxC,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,cACX,yBAAKC,IAAKL,EAAOM,MAAOC,IAAKP,EAAOQ,QAExC,yBAAKJ,UAAU,iBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,sBACVJ,EAAOQ,MAEZ,yBAAKJ,UAAU,qBACVJ,EAAOS,SAEPN,IAGT,yBAAKC,UAAU,sBACVH,IAGT,yBAAKG,UAAU,aACX,yBAAKC,IAAKH,EAAOK,IAAI,cAEzB,yBAAKH,UAAU,oB,aCJZM,MApBf,WAAwB,IAAD,EACeC,oBAAS,GADxB,mBACZC,EADY,KACDC,EADC,KAMnB,OACI,6BACI,4BAAQC,QALhB,WACID,GAAcD,KAIV,SAGA,2BAEQA,EAAY,SAAU,aCQ3BG,MAlBf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,CACEJ,OAAQ,CACJQ,KAAM,mBACNF,MATS,6FAUTG,SAAU,eAEdR,QAAQ,kDACRC,MAZU,gGAaVC,KAAM,iCAEd,kBAAC,EAAD,QCRoBa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.77bc6769.chunk.js","sourcesContent":["import React from 'react';\r\nimport './post.scss'\r\n\r\nfunction Post ({author, content, image, date}) {\r\nreturn (\r\n    <div className=\"post\">\r\n        <div className=\"post__logo\">\r\n            <img src={author.photo} alt={author.name}/>\r\n        </div>\r\n        <div className=\"post__content\">\r\n            <div className=\"post__text\">\r\n                <div className=\"post__author\">\r\n                    <div className=\"post__author__name\">\r\n                        {author.name}\r\n                    </div>\r\n                    <div className=\"author__nick-name\">\r\n                        {author.nickname}\r\n\r\n                        {date}\r\n                    </div>\r\n                </div>\r\n                <div className=\"post__author__text\">\r\n                    {content}\r\n                </div>\r\n            </div>\r\n            <div className=\"post__img\">\r\n                <img src={image} alt=\"post img\"/>\r\n            </div>\r\n            <div className='post__status'></div>\r\n        </div>\r\n    </div>\r\n);\r\n};\r\n\r\nexport default Post","import React, {useState} from 'react';\r\nimport './showBtn.scss';\r\n\r\n\r\nfunction ShowButton () {\r\n    const [btnStatus, changeStatus] = useState(true);\r\n\r\n    function eventClick() {\r\n        changeStatus(!btnStatus);\r\n    };\r\n    return (\r\n        <div>\r\n            <button onClick = {eventClick}>\r\n                Click\r\n            </button>\r\n            <p>\r\n                {\r\n                    btnStatus ? 'Active': 'Disable'\r\n                }\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ShowButton;\r\n","import React from 'react';\nimport './App.scss';\nimport Post from './components/post/index';\nimport ShowButton from './components/show_button'\nconst ANAKIN_IMAGE = \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\";\nconst RAY_IMAGE = \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Post\n        author={{\n            name: \"Anakin skywalker\",\n            photo: ANAKIN_IMAGE,\n            nickname: \"@dart_vader\"\n        }}\n        content=\"WTF? Who is Ray? Why she is Skywalker? Luke...?\"\n        image={RAY_IMAGE}\n        date={\"26 февр.\"}\n      />\n<ShowButton/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}